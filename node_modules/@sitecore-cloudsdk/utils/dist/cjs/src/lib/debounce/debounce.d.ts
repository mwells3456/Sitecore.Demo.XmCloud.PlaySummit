/**
 * Creates a debounced function that delays invoking `fn` until after `wait` milliseconds have elapsed
 * since the last time the debounced function was invoked. Optionally accumulates arguments of invocations
 * over the wait period.
 *
 * @template T The types of the arguments to the function to debounce.
 * @param fn The function to debounce.
 * @param wait The number of milliseconds to delay.
 * @param opts The options object.
 * @param options.accumulate Whether to accumulate arguments of each call during the wait time.
 * @returns A new debounced function.
 */
export declare function debounce<T extends any[]>(fn: (...args: T) => Promise<any> | void, wait: number, opts?: DebounceOptions): (...args: T) => Promise<unknown> | void;
/**
 * Options for the debounce function.
 * @property {boolean} - Whether to accumulate arguments of each call during the wait time.
 */
type DebounceOptions = {
    accumulate?: boolean;
};
export {};
