"use strict";
// Â© Sitecore Corporation A/S. All rights reserved. SitecoreÂ® is a registered trademark of Sitecore Corporation A/S.
/* eslint-disable tsdoc/syntax, @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.debounce = void 0;
/**
 * Creates a debounced function that delays invoking `fn` until after `wait` milliseconds have elapsed
 * since the last time the debounced function was invoked. Optionally accumulates arguments of invocations
 * over the wait period.
 *
 * @template T The types of the arguments to the function to debounce.
 * @param fn The function to debounce.
 * @param wait The number of milliseconds to delay.
 * @param opts The options object.
 * @param options.accumulate Whether to accumulate arguments of each call during the wait time.
 * @returns A new debounced function.
 */
function debounce(fn, wait, opts = {}) {
    let deferred;
    let timer;
    const pendingArgs = [];
    const debounced = (...args) => {
        if (deferred && timer)
            clearTimeout(timer);
        else
            deferred = defer();
        pendingArgs.push(args);
        timer = setTimeout(() => {
            flush();
        }, wait);
        if (opts.accumulate) {
            const argsIndex = pendingArgs.length - 1;
            return deferred.promise.then((results) => results[argsIndex]);
        }
        return deferred.promise;
    };
    const flush = () => {
        const thisDeferred = deferred;
        clearTimeout(timer);
        Promise.resolve(opts.accumulate ? fn(...pendingArgs) : fn(...pendingArgs[pendingArgs.length - 1])
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        ).then(thisDeferred.resolve, thisDeferred.reject);
        pendingArgs.length = 0;
        deferred = undefined;
    };
    return debounced;
}
exports.debounce = debounce;
/**
 * Creates a deferred object with `promise`, `resolve`, and `reject` properties.
 *
 * @template T The promised value's type.
 * @returns The deferred object.
 */
function defer() {
    // eslint-disable-next-line no-empty-function, @typescript-eslint/no-empty-function
    let resolve = () => { };
    // eslint-disable-next-line no-empty-function, @typescript-eslint/no-empty-function
    let reject = () => { };
    const promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
    });
    return {
        promise,
        reject,
        resolve
    };
}
