// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
import { createCookieString, getCookie } from '@sitecore-cloudsdk/utils';
import { fetchBrowserIdFromEdgeProxy } from '../../browser-id/fetch-browser-id-from-edge-proxy';
import { getBrowserId } from '../../browser-id/get-browser-id';
import { COOKIE_NAME_PREFIX, DEFAULT_COOKIE_EXPIRY_DAYS, ErrorMessages, LIBRARY_VERSION, SITECORE_EDGE_URL } from '../../consts';
import { getDefaultCookieAttributes } from '../../cookie/get-default-cookie-attributes';
import { debug } from '../../debug/debug';
import { CORE_NAMESPACE } from '../../debug/namespaces';
import { getGuestId } from '../../guest-id/get-guest-id';
export let cloudSDKSettings;
export const enabledPackages = new Map();
export let initCoreState = null;
export let cookiesValuesFromEdge;
export class CloudSDKBrowserInitializer {
    /**
     * Runs the initialization logic. Enables packages and create cookies for CloudSDK.
     * @param settings - Common settings for the CloudSDK
     * @throws the following errors:
     * {@link ErrorMessages.MV_0001}
     * {@link ErrorMessages.MV_0002}
     * {@link ErrorMessages.IE_0001}
     * {@link ErrorMessages.IV_0001}
     */
    constructor(settings) {
        if (typeof window === 'undefined')
            throw new Error(ErrorMessages.IE_0001);
        this.validateSettings(settings);
        cloudSDKSettings = this.createSettings(settings);
    }
    /**
     * Runs the initialization logic. Enables packages and create cookies for CloudSDK.
     */
    initialize() {
        if (!enabledPackages.size)
            debug(CORE_NAMESPACE)('CloudSDK was initialized with no packages');
        if (cloudSDKSettings.cookieSettings.enableBrowserCookie)
            initCoreState = this.createCookies();
        else
            initCoreState = Promise.resolve();
        this.sideEffects();
        enabledPackages.forEach((pkg) => {
            pkg.exec();
        });
    }
    /**
     * Runs any necessary side effects.
     */
    sideEffects() {
        window.scCloudSDK = {
            ...window.scCloudSDK,
            core: {
                getBrowserId,
                getGuestId,
                settings: {
                    siteName: cloudSDKSettings.siteName,
                    sitecoreEdgeContextId: cloudSDKSettings.sitecoreEdgeContextId,
                    sitecoreEdgeUrl: cloudSDKSettings.sitecoreEdgeUrl
                },
                version: LIBRARY_VERSION
            }
        };
    }
    /**
     * Validates the core settings to ensure they meet required criteria.
     *
     * This function validates the provided core settings object to ensure that essential properties
     * such as "sitecoreEdgeContextId" and "siteName" meet specific criteria and are not empty.
     *
     * @throws Error with specific error codes if any required property is missing or empty.
     */
    validateSettings(settings) {
        const { sitecoreEdgeContextId, siteName, sitecoreEdgeUrl } = settings;
        if (!sitecoreEdgeContextId || sitecoreEdgeContextId.trim().length === 0)
            throw new Error(ErrorMessages.MV_0001);
        if (!siteName || siteName.trim().length === 0)
            throw new Error(ErrorMessages.MV_0002);
        if (sitecoreEdgeUrl !== undefined)
            try {
                new URL(sitecoreEdgeUrl);
            }
            catch (e) {
                throw new Error(ErrorMessages.IV_0001);
            }
    }
    createSettings(settings) {
        const { siteName, sitecoreEdgeContextId, cookieDomain, cookiePath, cookieExpiryDays, sitecoreEdgeUrl, enableBrowserCookie } = settings;
        return {
            cookieSettings: {
                domain: cookieDomain,
                enableBrowserCookie: enableBrowserCookie ?? false,
                expiryDays: cookieExpiryDays || DEFAULT_COOKIE_EXPIRY_DAYS,
                name: {
                    browserId: `${COOKIE_NAME_PREFIX}${sitecoreEdgeContextId}`
                },
                path: cookiePath || '/'
            },
            siteName,
            sitecoreEdgeContextId,
            sitecoreEdgeUrl: sitecoreEdgeUrl ?? SITECORE_EDGE_URL
        };
    }
    async createCookies() {
        const attributes = getDefaultCookieAttributes(cloudSDKSettings.cookieSettings.expiryDays, cloudSDKSettings.cookieSettings.domain);
        const browserIdCookie = getCookie(window.document.cookie, cloudSDKSettings.cookieSettings.name.browserId);
        if (browserIdCookie)
            return;
        const cookiesValues = await fetchBrowserIdFromEdgeProxy(cloudSDKSettings.sitecoreEdgeUrl, cloudSDKSettings.sitecoreEdgeContextId);
        document.cookie = createCookieString(cloudSDKSettings.cookieSettings.name.browserId, cookiesValues.browserId, attributes);
        cookiesValuesFromEdge = cookiesValues;
    }
}
export function getCloudSDKSettings() {
    if (!cloudSDKSettings)
        throw new Error(ErrorMessages.IE_0012);
    return cloudSDKSettings;
}
export function getEnabledPackage(packageName) {
    return enabledPackages.get(packageName);
}
export let builderInstance = null;
export function getCookiesValuesFromEdge() {
    return cookiesValuesFromEdge;
}
/**
 * Runs the initialization logic. Enables packages and create cookies for CloudSDK.
 * @param settings - Common settings for the CloudSDK
 * @returns An instance of {@link CloudSDKBrowserInitializer}
 * @throws the following errors:
 * {@link ErrorMessages.MV_0001}
 * {@link ErrorMessages.MV_0002}
 * {@link ErrorMessages.IE_0001}
 * {@link ErrorMessages.IV_0001}
 */
export function CloudSDK(settings) {
    builderInstance = new CloudSDKBrowserInitializer(settings);
    return builderInstance;
}
