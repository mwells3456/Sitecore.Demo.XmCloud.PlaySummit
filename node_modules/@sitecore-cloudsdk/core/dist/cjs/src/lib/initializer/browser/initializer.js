"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudSDK = exports.getCookiesValuesFromEdge = exports.builderInstance = exports.getEnabledPackage = exports.getCloudSDKSettings = exports.CloudSDKBrowserInitializer = exports.cookiesValuesFromEdge = exports.initCoreState = exports.enabledPackages = exports.cloudSDKSettings = void 0;
// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
const utils_1 = require("@sitecore-cloudsdk/utils");
const fetch_browser_id_from_edge_proxy_1 = require("../../browser-id/fetch-browser-id-from-edge-proxy");
const get_browser_id_1 = require("../../browser-id/get-browser-id");
const consts_1 = require("../../consts");
const get_default_cookie_attributes_1 = require("../../cookie/get-default-cookie-attributes");
const debug_1 = require("../../debug/debug");
const namespaces_1 = require("../../debug/namespaces");
const get_guest_id_1 = require("../../guest-id/get-guest-id");
exports.enabledPackages = new Map();
exports.initCoreState = null;
class CloudSDKBrowserInitializer {
    /**
     * Runs the initialization logic. Enables packages and create cookies for CloudSDK.
     * @param settings - Common settings for the CloudSDK
     * @throws the following errors:
     * {@link ErrorMessages.MV_0001}
     * {@link ErrorMessages.MV_0002}
     * {@link ErrorMessages.IE_0001}
     * {@link ErrorMessages.IV_0001}
     */
    constructor(settings) {
        if (typeof window === 'undefined')
            throw new Error(consts_1.ErrorMessages.IE_0001);
        this.validateSettings(settings);
        exports.cloudSDKSettings = this.createSettings(settings);
    }
    /**
     * Runs the initialization logic. Enables packages and create cookies for CloudSDK.
     */
    initialize() {
        if (!exports.enabledPackages.size)
            (0, debug_1.debug)(namespaces_1.CORE_NAMESPACE)('CloudSDK was initialized with no packages');
        if (exports.cloudSDKSettings.cookieSettings.enableBrowserCookie)
            exports.initCoreState = this.createCookies();
        else
            exports.initCoreState = Promise.resolve();
        this.sideEffects();
        exports.enabledPackages.forEach((pkg) => {
            pkg.exec();
        });
    }
    /**
     * Runs any necessary side effects.
     */
    sideEffects() {
        window.scCloudSDK = {
            ...window.scCloudSDK,
            core: {
                getBrowserId: get_browser_id_1.getBrowserId,
                getGuestId: get_guest_id_1.getGuestId,
                settings: {
                    siteName: exports.cloudSDKSettings.siteName,
                    sitecoreEdgeContextId: exports.cloudSDKSettings.sitecoreEdgeContextId,
                    sitecoreEdgeUrl: exports.cloudSDKSettings.sitecoreEdgeUrl
                },
                version: consts_1.LIBRARY_VERSION
            }
        };
    }
    /**
     * Validates the core settings to ensure they meet required criteria.
     *
     * This function validates the provided core settings object to ensure that essential properties
     * such as "sitecoreEdgeContextId" and "siteName" meet specific criteria and are not empty.
     *
     * @throws Error with specific error codes if any required property is missing or empty.
     */
    validateSettings(settings) {
        const { sitecoreEdgeContextId, siteName, sitecoreEdgeUrl } = settings;
        if (!sitecoreEdgeContextId || sitecoreEdgeContextId.trim().length === 0)
            throw new Error(consts_1.ErrorMessages.MV_0001);
        if (!siteName || siteName.trim().length === 0)
            throw new Error(consts_1.ErrorMessages.MV_0002);
        if (sitecoreEdgeUrl !== undefined)
            try {
                new URL(sitecoreEdgeUrl);
            }
            catch (e) {
                throw new Error(consts_1.ErrorMessages.IV_0001);
            }
    }
    createSettings(settings) {
        const { siteName, sitecoreEdgeContextId, cookieDomain, cookiePath, cookieExpiryDays, sitecoreEdgeUrl, enableBrowserCookie } = settings;
        return {
            cookieSettings: {
                domain: cookieDomain,
                enableBrowserCookie: enableBrowserCookie ?? false,
                expiryDays: cookieExpiryDays || consts_1.DEFAULT_COOKIE_EXPIRY_DAYS,
                name: {
                    browserId: `${consts_1.COOKIE_NAME_PREFIX}${sitecoreEdgeContextId}`
                },
                path: cookiePath || '/'
            },
            siteName,
            sitecoreEdgeContextId,
            sitecoreEdgeUrl: sitecoreEdgeUrl ?? consts_1.SITECORE_EDGE_URL
        };
    }
    async createCookies() {
        const attributes = (0, get_default_cookie_attributes_1.getDefaultCookieAttributes)(exports.cloudSDKSettings.cookieSettings.expiryDays, exports.cloudSDKSettings.cookieSettings.domain);
        const browserIdCookie = (0, utils_1.getCookie)(window.document.cookie, exports.cloudSDKSettings.cookieSettings.name.browserId);
        if (browserIdCookie)
            return;
        const cookiesValues = await (0, fetch_browser_id_from_edge_proxy_1.fetchBrowserIdFromEdgeProxy)(exports.cloudSDKSettings.sitecoreEdgeUrl, exports.cloudSDKSettings.sitecoreEdgeContextId);
        document.cookie = (0, utils_1.createCookieString)(exports.cloudSDKSettings.cookieSettings.name.browserId, cookiesValues.browserId, attributes);
        exports.cookiesValuesFromEdge = cookiesValues;
    }
}
exports.CloudSDKBrowserInitializer = CloudSDKBrowserInitializer;
function getCloudSDKSettings() {
    if (!exports.cloudSDKSettings)
        throw new Error(consts_1.ErrorMessages.IE_0012);
    return exports.cloudSDKSettings;
}
exports.getCloudSDKSettings = getCloudSDKSettings;
function getEnabledPackage(packageName) {
    return exports.enabledPackages.get(packageName);
}
exports.getEnabledPackage = getEnabledPackage;
exports.builderInstance = null;
function getCookiesValuesFromEdge() {
    return exports.cookiesValuesFromEdge;
}
exports.getCookiesValuesFromEdge = getCookiesValuesFromEdge;
/**
 * Runs the initialization logic. Enables packages and create cookies for CloudSDK.
 * @param settings - Common settings for the CloudSDK
 * @returns An instance of {@link CloudSDKBrowserInitializer}
 * @throws the following errors:
 * {@link ErrorMessages.MV_0001}
 * {@link ErrorMessages.MV_0002}
 * {@link ErrorMessages.IE_0001}
 * {@link ErrorMessages.IV_0001}
 */
function CloudSDK(settings) {
    exports.builderInstance = new CloudSDKBrowserInitializer(settings);
    return exports.builderInstance;
}
exports.CloudSDK = CloudSDK;
