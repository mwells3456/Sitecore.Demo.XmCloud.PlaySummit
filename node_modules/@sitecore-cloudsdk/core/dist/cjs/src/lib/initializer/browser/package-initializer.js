"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageInitializer = void 0;
// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
const initializer_1 = require("./initializer");
class PackageInitializer {
    /* eslint-enable @typescript-eslint/naming-convention */
    constructor(packageContext) {
        /* eslint-disable @typescript-eslint/naming-convention */
        this._initState = null;
        this._sideEffects = packageContext.sideEffects;
        this._settings = packageContext.settings;
        this._dependencies = packageContext.dependencies ?? [];
    }
    validatePackages() {
        const validatedPackages = [];
        this._dependencies.forEach((dependency) => {
            // The package name is the name found in each package's package.json file e.g. @sitecore-cloudsdk/core"
            const depName = dependency.name.split('/')[1];
            const pkg = (0, initializer_1.getEnabledPackage)(dependency.name);
            if (!pkg)
                throw new Error(
                // eslint-disable-next-line max-len
                `[IE-0020] - This functionality also requires the "${depName}" package. Import "${dependency.name}/browser", then run ".${dependency.method}()" on "CloudSDK", before ".initialize()"`);
            validatedPackages.push(pkg);
        });
        return validatedPackages;
    }
    exec() {
        const validatedPackages = this.validatePackages();
        this._initState = this.wrapSideEffects(validatedPackages);
    }
    async wrapSideEffects(validatedPackages) {
        await initializer_1.initCoreState;
        await Promise.all(validatedPackages.map((pkg) => pkg.initState));
        this._sideEffects();
    }
    get initState() {
        return this._initState;
    }
    get settings() {
        return this._settings;
    }
}
exports.PackageInitializer = PackageInitializer;
