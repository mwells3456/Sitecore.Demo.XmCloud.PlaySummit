"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudSDK = exports.builderInstance = exports.getCookiesValuesFromEdge = exports.getCloudSDKResponse = exports.getCloudSDKRequest = exports.getEnabledPackage = exports.getCloudSDKSettings = exports.CloudSDKServerInitializer = exports.cloudSKDResponse = exports.cloudSKDRequest = exports.enabledPackages = exports.cloudSDKSettings = void 0;
const utils_1 = require("@sitecore-cloudsdk/utils");
const fetch_browser_id_from_edge_proxy_1 = require("../../browser-id/fetch-browser-id-from-edge-proxy");
const consts_1 = require("../../consts");
const get_cookie_value_from_middleware_request_1 = require("../../cookie/get-cookie-value-from-middleware-request");
const get_default_cookie_attributes_1 = require("../../cookie/get-default-cookie-attributes");
const debug_1 = require("../../debug/debug");
const namespaces_1 = require("../../debug/namespaces");
exports.enabledPackages = new Map();
let cookiesValuesFromEdge;
class CloudSDKServerInitializer {
    /**
     * Runs the initialization logic. Enables packages and create cookies for CloudSDK.
     * @param request - The request object, either a Middleware Request or an HTTP Request
     * @param response - The response object, either a Middleware Next Response or an HTTP Response
     * @param settings - Common settings for the CloudSDK
     * @throws the following errors:
     * {@link ErrorMessages.MV_0001}
     * {@link ErrorMessages.MV_0002}
     * {@link ErrorMessages.IV_0001}
     */
    constructor(request, response, settings) {
        this.validateSettings(settings);
        exports.cloudSDKSettings = this.createSettings(settings);
        this.request = request;
        this.response = response;
    }
    /**
     * Runs the initialization logic. Enables packages and create cookies for CloudSDK.
     */
    async initialize() {
        if (!exports.enabledPackages.size)
            (0, debug_1.debug)(namespaces_1.CORE_NAMESPACE)('CloudSDK was initialized with no packages');
        if (exports.cloudSDKSettings.cookieSettings.enableServerCookie)
            await this.createCookies();
        const execs = Array.from(exports.enabledPackages).map(([, value]) => value.exec());
        await Promise.all(execs);
    }
    /**
     * Validates the core settings to ensure they meet required criteria.
     *
     * This function validates the provided core settings object to ensure that essential properties
     * such as "sitecoreEdgeContextId" and "siteName" meet specific criteria and are not empty.
     *
     * @throws Error with specific error codes if any required property is missing or empty.
     */
    validateSettings(settings) {
        const { sitecoreEdgeContextId, siteName, sitecoreEdgeUrl } = settings;
        if (!sitecoreEdgeContextId || sitecoreEdgeContextId.trim().length === 0)
            throw new Error(consts_1.ErrorMessages.MV_0001);
        if (!siteName || siteName.trim().length === 0)
            throw new Error(consts_1.ErrorMessages.MV_0002);
        if (sitecoreEdgeUrl !== undefined)
            try {
                new URL(sitecoreEdgeUrl);
            }
            catch (e) {
                throw new Error(consts_1.ErrorMessages.IV_0001);
            }
    }
    createSettings(settings) {
        const { siteName, sitecoreEdgeContextId, cookieDomain, cookiePath, cookieExpiryDays, sitecoreEdgeUrl, enableServerCookie, timeout } = settings;
        return {
            cookieSettings: {
                domain: cookieDomain,
                enableServerCookie: enableServerCookie ?? false,
                expiryDays: cookieExpiryDays || consts_1.DEFAULT_COOKIE_EXPIRY_DAYS,
                name: {
                    browserId: `${consts_1.COOKIE_NAME_PREFIX}${sitecoreEdgeContextId}`
                },
                path: cookiePath || '/'
            },
            siteName,
            sitecoreEdgeContextId,
            sitecoreEdgeUrl: sitecoreEdgeUrl ?? consts_1.SITECORE_EDGE_URL,
            timeout
        };
    }
    async createCookies() {
        if ((0, utils_1.isNextJsMiddlewareRequest)(this.request) && (0, utils_1.isNextJsMiddlewareResponse)(this.response))
            await this.handleNextJsMiddlewareCookie();
        else if ((0, utils_1.isHttpRequest)(this.request) && (0, utils_1.isHttpResponse)(this.response))
            await this.handleHttpCookie();
    }
    async handleNextJsMiddlewareCookie() {
        const request = this.request;
        const response = this.response;
        const { browserId: browserIdName } = exports.cloudSDKSettings.cookieSettings.name;
        let browserIdCookieValue = (0, get_cookie_value_from_middleware_request_1.getCookieValueFromMiddlewareRequest)(request, browserIdName);
        if (!browserIdCookieValue) {
            const cookieValues = await (0, fetch_browser_id_from_edge_proxy_1.fetchBrowserIdFromEdgeProxy)(exports.cloudSDKSettings.sitecoreEdgeUrl, exports.cloudSDKSettings.sitecoreEdgeContextId, exports.cloudSDKSettings.timeout);
            browserIdCookieValue = cookieValues.browserId;
            cookiesValuesFromEdge = cookieValues;
        }
        const defaultCookieAttributes = (0, get_default_cookie_attributes_1.getDefaultCookieAttributes)(exports.cloudSDKSettings.cookieSettings.expiryDays, exports.cloudSDKSettings.cookieSettings.domain);
        request.cookies.set(browserIdName, browserIdCookieValue, defaultCookieAttributes);
        response.cookies.set(browserIdName, browserIdCookieValue, defaultCookieAttributes);
    }
    async handleHttpCookie() {
        const request = this.request;
        const response = this.response;
        const browserIdName = exports.cloudSDKSettings.cookieSettings.name.browserId;
        const browserIdCookie = (0, utils_1.getCookieServerSide)(request.headers.cookie, browserIdName);
        let browserIdCookieValue;
        const defaultCookieAttributes = (0, get_default_cookie_attributes_1.getDefaultCookieAttributes)(exports.cloudSDKSettings.cookieSettings.expiryDays, exports.cloudSDKSettings.cookieSettings.domain);
        if (!browserIdCookie) {
            const cookieValues = await (0, fetch_browser_id_from_edge_proxy_1.fetchBrowserIdFromEdgeProxy)(exports.cloudSDKSettings.sitecoreEdgeUrl, exports.cloudSDKSettings.sitecoreEdgeContextId, exports.cloudSDKSettings.timeout);
            browserIdCookieValue = cookieValues.browserId;
            cookiesValuesFromEdge = cookieValues;
        }
        else
            browserIdCookieValue = browserIdCookie.value;
        const browserIdCookieString = (0, utils_1.createCookieString)(browserIdName, browserIdCookieValue, defaultCookieAttributes);
        if (!browserIdCookie)
            request.headers.cookie = request.headers.cookie
                ? request.headers.cookie + '; ' + browserIdCookieString
                : browserIdCookieString;
        response.setHeader('Set-Cookie', browserIdCookieString);
    }
}
exports.CloudSDKServerInitializer = CloudSDKServerInitializer;
function getCloudSDKSettings() {
    if (!exports.cloudSDKSettings)
        throw new Error(consts_1.ErrorMessages.IE_0013);
    return exports.cloudSDKSettings;
}
exports.getCloudSDKSettings = getCloudSDKSettings;
function getEnabledPackage(packageName) {
    return exports.enabledPackages.get(packageName);
}
exports.getEnabledPackage = getEnabledPackage;
function getCloudSDKRequest() {
    return exports.cloudSKDRequest;
}
exports.getCloudSDKRequest = getCloudSDKRequest;
function getCloudSDKResponse() {
    return exports.cloudSKDResponse;
}
exports.getCloudSDKResponse = getCloudSDKResponse;
function getCookiesValuesFromEdge() {
    return cookiesValuesFromEdge;
}
exports.getCookiesValuesFromEdge = getCookiesValuesFromEdge;
exports.builderInstance = null;
/**
 * Runs the initialization logic. Enables packages and create cookies for CloudSDK.
 * @param request - The request object, either a Middleware Request or an HTTP Request
 * @param response - The response object, either a Middleware Next Response or an HTTP Response
 * @param settings - Common settings for the CloudSDK
 * @returns An instance of {@link CloudSDKServerInitializer}
 * @throws the following errors:
 * {@link ErrorMessages.MV_0001}
 * {@link ErrorMessages.MV_0002}
 * {@link ErrorMessages.IV_0001}
 */
function CloudSDK(request, response, settings) {
    exports.cloudSKDRequest = request;
    exports.cloudSKDResponse = response;
    exports.builderInstance = new CloudSDKServerInitializer(request, response, settings);
    return exports.builderInstance;
}
exports.CloudSDK = CloudSDK;
