"use strict";
// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchBrowserIdFromEdgeProxy = void 0;
const consts_1 = require("../consts");
const utils_1 = require("@sitecore-cloudsdk/utils");
const construct_get_browser_id_url_1 = require("./construct-get-browser-id-url");
/**
 * Gets the browser ID and Client Key from Sitecore Edge Proxy
 * @param sitecoreEdgeUrl - The baseURL for the Edge Proxy API.
 * @param sitecoreEdgeContextId - The sitecoreContextId param for the edge Proxy API.
 * @param timeout - The timeout for the call to proxy
 * @returns the browser ID
 */
async function fetchBrowserIdFromEdgeProxy(sitecoreEdgeUrl, sitecoreEdgeContextId, timeout) {
    const fetchOptions = {
        // eslint-disable-next-line @typescript-eslint/naming-convention
        headers: { 'X-Library-Version': consts_1.LIBRARY_VERSION }
    };
    const url = (0, construct_get_browser_id_url_1.constructGetBrowserIdUrl)(sitecoreEdgeUrl, sitecoreEdgeContextId);
    let payload;
    if (timeout !== undefined)
        payload = await (0, utils_1.fetchWithTimeout)(url, timeout, fetchOptions)
            .then((response) => {
            return (response && response.json()) || null;
        })
            .catch((err) => {
            if (err.message === utils_1.ErrorMessages.IV_0006 || err.message === utils_1.ErrorMessages.IE_0002)
                throw new Error(err.message);
            return null;
        });
    else
        payload = await fetch(url, fetchOptions)
            .then((res) => res.json())
            .catch(() => undefined);
    if (!payload?.ref)
        throw new Error(consts_1.ErrorMessages.IE_0003);
    const { ref: browserId, customer_ref: guestId } = payload;
    return { browserId, guestId };
}
exports.fetchBrowserIdFromEdgeProxy = fetchBrowserIdFromEdgeProxy;
