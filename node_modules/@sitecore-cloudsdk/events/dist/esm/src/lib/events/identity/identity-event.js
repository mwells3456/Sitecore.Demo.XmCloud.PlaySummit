import { flattenObject, isShortISODateString, isValidEmail } from '@sitecore-cloudsdk/utils';
import { BaseEvent } from '../base-event';
import { ErrorMessages } from '../../consts';
import { MAX_EXT_ATTRIBUTES } from '../consts';
export class IdentityEvent extends BaseEvent {
    /**
     * A class that extends from {@link BaseEvent} and has all the required functionality to send a VIEW event
     *
     * @param args - Unified object containing the required properties
     */
    constructor(args) {
        const { channel, currency, language, page, extensionData } = args.identityData;
        super({ channel, currency, language, page }, args.id);
        this.extensionData = {};
        this.numberOfExtensionDataProperties = 0;
        this.validateAttributes(args.identityData);
        this.identityData = args.identityData;
        this.sendEvent = args.sendEvent;
        this.settings = args.settings;
        if (extensionData)
            this.extensionData = flattenObject({ object: extensionData });
        this.numberOfExtensionDataProperties = Object.entries(this.extensionData).length;
        if (this.numberOfExtensionDataProperties > MAX_EXT_ATTRIBUTES)
            throw new Error(ErrorMessages.IV_0005);
    }
    /**
     * Function that validates the identifiers object, email and date attributes for CDN users
     *  * @param identityData - The data to be validated
     */
    validateAttributes(identityData) {
        if (identityData.identifiers.length === 0)
            throw new Error(ErrorMessages.MV_0003);
        if (identityData.dob !== undefined && !isShortISODateString(identityData.dob))
            throw new Error(ErrorMessages.IV_0002);
        identityData.identifiers.forEach((identifier) => {
            if (identifier.expiryDate && !isShortISODateString(identifier.expiryDate))
                throw new Error(ErrorMessages.IV_0004);
        });
        if (identityData.email && !isValidEmail(identityData.email))
            throw new Error(ErrorMessages.IV_0003);
    }
    /**
     * A function that maps the identity event input data with the payload sent to the API
     * @returns - The payload object
     */
    mapAttributes() {
        const identityPayload = {
            city: this.identityData.city,
            country: this.identityData.country,
            dob: this.identityData.dob,
            email: this.identityData.email,
            firstname: this.identityData.firstName,
            gender: this.identityData.gender,
            identifiers: this.identityData.identifiers.map((value) => {
                return {
                    // eslint-disable-next-line @typescript-eslint/naming-convention
                    expiry_date: value.expiryDate,
                    id: value.id,
                    provider: value.provider
                };
            }),
            lastname: this.identityData.lastName,
            mobile: this.identityData.mobile,
            phone: this.identityData.phone,
            // eslint-disable-next-line @typescript-eslint/naming-convention
            postal_code: this.identityData.postalCode,
            state: this.identityData.state,
            street: this.identityData.street,
            title: this.identityData.title,
            type: 'IDENTITY'
        };
        if (this.numberOfExtensionDataProperties > 0)
            identityPayload.ext = this.extensionData;
        return identityPayload;
    }
    /**
     * Sends the event to Sitecore EP
     * @returns - A promise that resolves with either the Sitecore EP response object or null
     */
    async send() {
        const baseAttr = this.mapBaseEventPayload();
        const eventAttrs = this.mapAttributes();
        const fetchBody = Object.assign({}, eventAttrs, baseAttr);
        return await this.sendEvent(fetchBody, this.settings);
    }
}
