"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.awaitInit = exports.addEvents = exports.sideEffects = void 0;
// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
const browser_1 = require("@sitecore-cloudsdk/core/browser");
const internal_1 = require("@sitecore-cloudsdk/core/internal");
const consts_1 = require("../../consts");
const event_1 = require("../../events/custom-event/event");
const form_1 = require("../../events/custom-event/form");
const identity_1 = require("../../events/identity/identity");
const page_view_1 = require("../../events/page-view/page-view");
const addToEventQueue_1 = require("../../eventStorage/addToEventQueue");
const clearEventQueue_1 = require("../../eventStorage/clearEventQueue");
const processEventQueue_1 = require("../../eventStorage/processEventQueue");
async function sideEffects() {
    window.scCloudSDK = {
        ...window.scCloudSDK,
        events: {
            addToEventQueue: addToEventQueue_1.addToEventQueue,
            clearEventQueue: clearEventQueue_1.clearEventQueue,
            event: event_1.event,
            form: form_1.form,
            identity: identity_1.identity,
            pageView: page_view_1.pageView,
            processEventQueue: processEventQueue_1.processEventQueue,
            version: consts_1.PACKAGE_VERSION
        }
    };
    (0, internal_1.debug)(consts_1.EVENTS_NAMESPACE)('eventsClient library initialized');
}
exports.sideEffects = sideEffects;
/**
 * Makes the functionality of the events package available.
 *
 * @returns An instance of {@link CloudSDKBrowserInitializer}
 */
function addEvents() {
    const eventsInitializer = new internal_1.PackageInitializer({ sideEffects });
    internal_1.enabledPackagesBrowser.set(consts_1.PACKAGE_NAME, eventsInitializer);
    return this;
}
exports.addEvents = addEvents;
browser_1.CloudSDKBrowserInitializer.prototype.addEvents = addEvents;
async function awaitInit() {
    const initState = (0, internal_1.getEnabledPackageBrowser)(consts_1.PACKAGE_NAME)?.initState;
    if (!initState)
        throw new Error(consts_1.ErrorMessages.IE_0014);
    await initState;
}
exports.awaitInit = awaitInit;
