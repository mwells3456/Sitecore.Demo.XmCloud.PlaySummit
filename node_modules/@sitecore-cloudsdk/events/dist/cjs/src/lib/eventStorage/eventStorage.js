"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventQueue = void 0;
// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
const internal_1 = require("@sitecore-cloudsdk/core/internal");
const events_1 = require("../events");
const sendEvent_1 = require("../events/send-event/sendEvent");
class EventQueue {
    constructor() {
        /**
         * Initialize the Event Storage
         */
        this.key = 'EventQueue';
    }
    /** Returns the stored array of data with type QueueEventPayload, or empty array if the given key does not exist. */
    getEventQueue() {
        const sessionStorage = this.getSessionStorage();
        const storedQueue = sessionStorage.getItem(this.key) ?? '""';
        try {
            const parsedQueueEvent = JSON.parse(storedQueue);
            return Array.isArray(parsedQueueEvent) ? parsedQueueEvent : [];
        }
        catch {
            return [];
        }
    }
    /**
     * Adds the required event data to the queue and stores it in the storage.
     * @param queueEventPayload - The required event data for the creation of a CustomEvent.
     * Performs validation by creating a new CustomEvent.
     */
    enqueueEvent(queueEventPayload) {
        const sessionStorage = this.getSessionStorage();
        queueEventPayload.eventData.page = queueEventPayload.eventData.page ?? (0, internal_1.pageName)();
        queueEventPayload.eventData.language = queueEventPayload.eventData.language ?? (0, internal_1.language)();
        new events_1.CustomEvent({
            sendEvent: sendEvent_1.sendEvent,
            ...queueEventPayload
        });
        const eventQueue = this.getEventQueue();
        eventQueue.push(queueEventPayload);
        sessionStorage.setItem(this.key, JSON.stringify(eventQueue));
    }
    /**
     * Iterates the queue, and sends sequently the custom events to Sitecore EP.
     */
    async sendAllEvents() {
        const eventQueue = this.getEventQueue();
        for (const queueEventPayload of eventQueue)
            await new events_1.CustomEvent({
                eventData: queueEventPayload.eventData,
                id: queueEventPayload.id,
                sendEvent: sendEvent_1.sendEvent,
                settings: queueEventPayload.settings
            }).send();
        this.clearQueue();
    }
    /**
     * Clears the queue from storage.
     */
    clearQueue() {
        const sessionStorage = this.getSessionStorage();
        sessionStorage.removeItem(this.key);
    }
    getSessionStorage() {
        return sessionStorage;
    }
}
exports.eventQueue = new EventQueue();
