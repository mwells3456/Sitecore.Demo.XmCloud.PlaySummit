import type { CustomEventArguments } from '../events';
declare class EventQueue {
    /**
     * Initialize the Event Storage
     */
    private key;
    /** Returns the stored array of data with type QueueEventPayload, or empty array if the given key does not exist. */
    private getEventQueue;
    /**
     * Adds the required event data to the queue and stores it in the storage.
     * @param queueEventPayload - The required event data for the creation of a CustomEvent.
     * Performs validation by creating a new CustomEvent.
     */
    enqueueEvent(queueEventPayload: QueueEventPayload): void;
    /**
     * Iterates the queue, and sends sequently the custom events to Sitecore EP.
     */
    sendAllEvents(): Promise<void>;
    /**
     * Clears the queue from storage.
     */
    clearQueue(): void;
    private getSessionStorage;
}
/**
 * This Storage interface represents the required storage functionality.
 */
export interface Storage {
    getItem(key: string): string | null;
    setItem(key: string, value: string): void;
    removeItem(key: string): void;
}
export type QueueEventPayload = Pick<CustomEventArguments, 'eventData' | 'settings' | 'id'>;
export declare const eventQueue: EventQueue;
export {};
