"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageViewEvent = void 0;
const consts_1 = require("../consts");
const base_event_1 = require("../base-event");
const consts_2 = require("../../consts");
const utils_1 = require("@sitecore-cloudsdk/utils");
class PageViewEvent extends base_event_1.BaseEvent {
    /**
     * A class that extends from {@link BaseEvent} and has all the required functionality to send a VIEW event
     * @param args - Unified object containing the required properties
     */
    constructor(args) {
        const { channel, currency, language, page, extensionData } = { ...args.pageViewData };
        super({
            channel,
            currency,
            language,
            page
        }, args.id);
        this.extensionData = {};
        this.pageViewData = args.pageViewData;
        this.sendEvent = args.sendEvent;
        this.settings = args.settings;
        this.urlSearchParams = new URLSearchParams(decodeURI(args.searchParams));
        if (extensionData)
            this.extensionData = (0, utils_1.flattenObject)({ object: extensionData });
        const numberOfExtensionDataProperties = Object.entries(this.extensionData).length;
        if (numberOfExtensionDataProperties > consts_1.MAX_EXT_ATTRIBUTES)
            throw new Error(consts_2.ErrorMessages.IV_0005);
        this.includeUTMParameters = (args.pageViewData && args.pageViewData.includeUTMParameters) ?? true;
    }
    /**
     * Gets the variant ID from the url if not passed by the developer
     * Gets the variant ID from the extension data if not found from the url
     * @returns - variant ID or null
     */
    getPageVariantId(pageVariantIdFromPageViewData, pageVariantIdFromExt) {
        if (pageVariantIdFromPageViewData)
            return pageVariantIdFromPageViewData;
        const pageVariantIdFromURL = this.urlSearchParams.get('variantid');
        if (pageVariantIdFromURL)
            return pageVariantIdFromURL;
        if (pageVariantIdFromExt)
            return pageVariantIdFromExt;
        return null;
    }
    /**
     * Returns the referrer if exists on page view event else null if we are on server and no referrer is on event, else
     * returns the href if on client side and the document referrer is different from the window location hostname
     * @returns - the referrer
     */
    getReferrer() {
        if (this.pageViewData?.referrer)
            return this.pageViewData.referrer;
        if (typeof window === 'undefined')
            return null;
        if (!PageViewEvent.isFirstPageView || !document.referrer)
            return null;
        const { hostname, href } = new URL(document.referrer);
        return window.location.hostname !== hostname ? href : null;
    }
    /**
     * Maps parameters given as input to corresponding attributes send to the API
     * @returns the mapped object to be sent as payload
     */
    mapAttributes() {
        let pageViewPayload = {
            type: 'VIEW'
        };
        const pageVariantId = this.pageViewData &&
            this.getPageVariantId(this.pageViewData.pageVariantId, this.extensionData['pageVariantId']);
        if (pageVariantId !== null)
            pageViewPayload.ext = { ...pageViewPayload.ext, pageVariantId };
        if (Object.keys(this.extensionData).length > 0) {
            delete this.extensionData['pageVariantId'];
            pageViewPayload.ext = { ...pageViewPayload.ext, ...this.extensionData };
        }
        if (this.includeUTMParameters) {
            const utmParameters = this.getUTMParameters();
            pageViewPayload = { ...pageViewPayload, ...utmParameters };
        }
        const referrer = this.getReferrer();
        if (referrer !== null)
            pageViewPayload = { ...pageViewPayload, referrer };
        if (this.pageViewData?.searchData)
            pageViewPayload.sc_search = {
                data: this.pageViewData.searchData,
                metadata: {
                    // eslint-disable-next-line @typescript-eslint/naming-convention
                    ut_api_version: '1.0'
                }
            };
        return pageViewPayload;
    }
    /**
     * Sends the event to Sitecore EP
     * @returns - A promise that resolves with either the Sitecore EP response object or null
     */
    async send() {
        const baseAttr = this.mapBaseEventPayload();
        const eventAttrs = this.mapAttributes();
        PageViewEvent.isFirstPageView = false;
        return await this.sendEvent({ ...baseAttr, ...eventAttrs }, this.settings);
    }
    /**
     * Retrieves UTM parameters from the url query string
     * @returns - an object containing the UTM parameters if they exist
     */
    getUTMParameters() {
        const utmParameters = {};
        this.urlSearchParams.forEach((value, key) => {
            const param = key.toLowerCase();
            if (param.indexOf(consts_1.UTM_PREFIX) === 0)
                utmParameters[param] = value;
        });
        return utmParameters;
    }
}
exports.PageViewEvent = PageViewEvent;
PageViewEvent.isFirstPageView = true;
