// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
import { CloudSDKBrowserInitializer } from '@sitecore-cloudsdk/core/browser';
import { COOKIE_NAME_PREFIX, debug, enabledPackagesBrowser as enabledPackages, getCloudSDKSettingsBrowser as getCloudSDKSettings, getEnabledPackageBrowser, PackageInitializer } from '@sitecore-cloudsdk/core/internal';
import { PACKAGE_NAME as EVENTS_PACKAGE_NAME, PACKAGE_INITIALIZER_METHOD_NAME } from '@sitecore-cloudsdk/events/browser';
import { appendScriptWithAttributes } from '@sitecore-cloudsdk/utils';
import { ErrorMessages, PACKAGE_NAME, PACKAGE_VERSION, PERSONALIZE_NAMESPACE } from '../../consts';
import { personalize } from '../../personalization/personalize';
import { getCdnUrl } from '../../web-personalization/get-cdn-url';
import { createPersonalizeCookie } from './createPersonalizeCookie';
export async function sideEffects() {
    const personalizeSettings = getEnabledPackageBrowser(PACKAGE_NAME)?.settings;
    const cloudSDKSettings = getCloudSDKSettings();
    window.scCloudSDK = {
        ...window.scCloudSDK,
        personalize: {
            personalize,
            version: PACKAGE_VERSION
        }
    };
    if (personalizeSettings.webPersonalization) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        window.scCloudSDK.personalize.settings = personalizeSettings.webPersonalization;
        const cdnUrl = await getCdnUrl(cloudSDKSettings.sitecoreEdgeContextId, cloudSDKSettings.sitecoreEdgeUrl);
        if (cdnUrl)
            appendScriptWithAttributes({ async: personalizeSettings.webPersonalization.async, src: cdnUrl });
    }
    debug(PERSONALIZE_NAMESPACE)('personalizeClient library initialized');
    if (!cloudSDKSettings.cookieSettings.enableBrowserCookie || !personalizeSettings.enablePersonalizeCookie)
        return;
    await createPersonalizeCookie(personalizeSettings, cloudSDKSettings);
}
/**
 * Makes the functionality of the personalize package available.
 *
 * @returns An instance of {@link CloudSDKBrowserInitializer}
 */
export function addPersonalize(settings = { enablePersonalizeCookie: false }) {
    const dependencies = [];
    const cookieSettings = {
        name: {
            guestId: `${COOKIE_NAME_PREFIX}${getCloudSDKSettings().sitecoreEdgeContextId}_personalize`
        }
    };
    let webPersonalization = false;
    if (settings.webPersonalization) {
        dependencies.push({ method: PACKAGE_INITIALIZER_METHOD_NAME, name: EVENTS_PACKAGE_NAME });
        webPersonalization = {
            async: settings.webPersonalization.async ?? true,
            defer: settings.webPersonalization.defer ?? false
        };
    }
    const personalizeInitializer = new PackageInitializer({
        dependencies,
        settings: { ...settings, cookieSettings, webPersonalization },
        sideEffects
    });
    enabledPackages.set(PACKAGE_NAME, personalizeInitializer);
    return this;
}
CloudSDKBrowserInitializer.prototype.addPersonalize = addPersonalize;
/**
 * A function that handles the async browser init logic. Throws an error or awaits the promise.
 */
export async function awaitInit() {
    const initState = getEnabledPackageBrowser(PACKAGE_NAME)?.initState;
    if (!initState)
        throw new Error(ErrorMessages.IE_0016);
    await initState;
}
