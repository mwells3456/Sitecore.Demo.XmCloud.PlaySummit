import { debug, generateCorrelationId, processDebugResponse } from '@sitecore-cloudsdk/core/internal';
import { fetchWithTimeout } from '@sitecore-cloudsdk/utils';
import { PACKAGE_VERSION, PERSONALIZE_NAMESPACE } from '../consts';
/**
 * A function that sends a CallFlow request to Sitecore EP
 * @param personalizeData - Properties to be send to Sitecore EP
 * @param settings - settings for the url params
 * @param timeout - Optional timeout in milliseconds to cancel the request
 * @returns - A promise that resolves with either the Sitecore EP response object or unknown
 */
export async function sendCallFlowsRequest(epCallFlowsBody, settings, opts) {
    const startTimestamp = Date.now();
    let debugResponse = {};
    // eslint-disable-next-line max-len
    const requestUrl = `${settings.sitecoreEdgeUrl}/v1/personalize?sitecoreContextId=${settings.sitecoreEdgeContextId}&siteId=${settings.siteName}`;
    const fetchOptions = {
        body: JSON.stringify(epCallFlowsBody),
        headers: {
            /* eslint-disable @typescript-eslint/naming-convention */
            'Content-Type': 'application/json',
            'X-Library-Version': PACKAGE_VERSION,
            'x-sc-correlation-id': generateCorrelationId()
            /* eslint-enable @typescript-eslint/naming-convention */
        },
        method: 'POST'
    };
    if (opts?.userAgent)
        fetchOptions.headers['User-Agent'] = opts.userAgent;
    debug(PERSONALIZE_NAMESPACE)('Personalize request: %s with options: %O', requestUrl, fetchOptions);
    if (opts?.timeout === undefined)
        return fetch(requestUrl, fetchOptions)
            .then((response) => {
            debugResponse = processDebugResponse(PERSONALIZE_NAMESPACE, response);
            return response.json();
        })
            .then((data) => {
            debugResponse.body = data;
            debug(PERSONALIZE_NAMESPACE)('Personalize response in %dms : %O', Date.now() - startTimestamp, debugResponse);
            return data;
        })
            .catch((error) => {
            debug(PERSONALIZE_NAMESPACE)('Error personalize response: %O', error);
            return null;
        });
    return fetchWithTimeout(requestUrl, opts.timeout, fetchOptions)
        .then((response) => {
        if (!response)
            return null;
        debugResponse = processDebugResponse(PERSONALIZE_NAMESPACE, response);
        return response.json();
    })
        .then((data) => {
        debugResponse.body = data;
        debug(PERSONALIZE_NAMESPACE)('Personalize response in %dms : %O', Date.now() - startTimestamp, debugResponse);
        return data;
    })
        .catch((error) => {
        debug(PERSONALIZE_NAMESPACE)('Error personalize response: %O', error);
        if (error.message.includes('IV-0006') || error.message.includes('IE-0002'))
            throw new Error(error.message);
        return null;
    });
}
