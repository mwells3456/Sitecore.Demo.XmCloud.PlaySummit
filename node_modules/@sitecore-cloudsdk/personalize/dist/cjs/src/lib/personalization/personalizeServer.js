"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.personalizeServer = void 0;
// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
const internal_1 = require("@sitecore-cloudsdk/core/internal");
const utils_1 = require("@sitecore-cloudsdk/utils");
const consts_1 = require("../consts");
const initializer_1 = require("../initializer/server/initializer");
const personalizer_1 = require("./personalizer");
/**
 * A function that executes an interactive experiment or web experiment over any web-based or mobile application.
 * @param request - The request object, either a Middleware Request or an HTTP Request
 * @param personalizeData - The required/optional attributes in order to create a flow execution
 * @param opts - An optional object containing additional options such as timeout.
 * Used to abort the request to execute an interactive experiment or web experiment.
 * @returns A flow execution response
 */
function personalizeServer(request, personalizeData, opts) {
    (0, initializer_1.verifyPersonalizePackageExistence)();
    const requestUrl = new URL(request.url, `https://localhost`);
    const userAgent = (0, utils_1.isNextJsMiddlewareRequest)(request)
        ? request.headers.get('user-agent')
        : request.headers['user-agent'];
    if (!personalizeData.geo && (0, utils_1.isNextJsMiddlewareRequest)(request) && request.geo && Object.keys(request.geo).length)
        personalizeData.geo = request.geo;
    const settings = (0, internal_1.getCloudSDKSettingsServer)();
    const personalizeSettings = (0, internal_1.getEnabledPackageServer)(consts_1.PACKAGE_NAME)?.settings;
    const browserId = (0, internal_1.getCookieValueFromRequest)(request, settings.cookieSettings.name.browserId);
    const guestId = (0, internal_1.getCookieValueFromRequest)(request, personalizeSettings.cookieSettings.name.guestId);
    return new personalizer_1.Personalizer(browserId, guestId).getInteractiveExperienceData(personalizeData, settings, requestUrl.search, {
        timeout: opts?.timeout,
        userAgent
    });
}
exports.personalizeServer = personalizeServer;
