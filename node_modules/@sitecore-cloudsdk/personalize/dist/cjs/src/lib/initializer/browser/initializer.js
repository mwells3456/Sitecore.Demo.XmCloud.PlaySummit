"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.awaitInit = exports.addPersonalize = exports.sideEffects = void 0;
// © Sitecore Corporation A/S. All rights reserved. Sitecore® is a registered trademark of Sitecore Corporation A/S.
const browser_1 = require("@sitecore-cloudsdk/core/browser");
const internal_1 = require("@sitecore-cloudsdk/core/internal");
const browser_2 = require("@sitecore-cloudsdk/events/browser");
const utils_1 = require("@sitecore-cloudsdk/utils");
const consts_1 = require("../../consts");
const personalize_1 = require("../../personalization/personalize");
const get_cdn_url_1 = require("../../web-personalization/get-cdn-url");
const createPersonalizeCookie_1 = require("./createPersonalizeCookie");
async function sideEffects() {
    const personalizeSettings = (0, internal_1.getEnabledPackageBrowser)(consts_1.PACKAGE_NAME)?.settings;
    const cloudSDKSettings = (0, internal_1.getCloudSDKSettingsBrowser)();
    window.scCloudSDK = {
        ...window.scCloudSDK,
        personalize: {
            personalize: personalize_1.personalize,
            version: consts_1.PACKAGE_VERSION
        }
    };
    if (personalizeSettings.webPersonalization) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        window.scCloudSDK.personalize.settings = personalizeSettings.webPersonalization;
        const cdnUrl = await (0, get_cdn_url_1.getCdnUrl)(cloudSDKSettings.sitecoreEdgeContextId, cloudSDKSettings.sitecoreEdgeUrl);
        if (cdnUrl)
            (0, utils_1.appendScriptWithAttributes)({ async: personalizeSettings.webPersonalization.async, src: cdnUrl });
    }
    (0, internal_1.debug)(consts_1.PERSONALIZE_NAMESPACE)('personalizeClient library initialized');
    if (!cloudSDKSettings.cookieSettings.enableBrowserCookie || !personalizeSettings.enablePersonalizeCookie)
        return;
    await (0, createPersonalizeCookie_1.createPersonalizeCookie)(personalizeSettings, cloudSDKSettings);
}
exports.sideEffects = sideEffects;
/**
 * Makes the functionality of the personalize package available.
 *
 * @returns An instance of {@link CloudSDKBrowserInitializer}
 */
function addPersonalize(settings = { enablePersonalizeCookie: false }) {
    const dependencies = [];
    const cookieSettings = {
        name: {
            guestId: `${internal_1.COOKIE_NAME_PREFIX}${(0, internal_1.getCloudSDKSettingsBrowser)().sitecoreEdgeContextId}_personalize`
        }
    };
    let webPersonalization = false;
    if (settings.webPersonalization) {
        dependencies.push({ method: browser_2.PACKAGE_INITIALIZER_METHOD_NAME, name: browser_2.PACKAGE_NAME });
        webPersonalization = {
            async: settings.webPersonalization.async ?? true,
            defer: settings.webPersonalization.defer ?? false
        };
    }
    const personalizeInitializer = new internal_1.PackageInitializer({
        dependencies,
        settings: { ...settings, cookieSettings, webPersonalization },
        sideEffects
    });
    internal_1.enabledPackagesBrowser.set(consts_1.PACKAGE_NAME, personalizeInitializer);
    return this;
}
exports.addPersonalize = addPersonalize;
browser_1.CloudSDKBrowserInitializer.prototype.addPersonalize = addPersonalize;
/**
 * A function that handles the async browser init logic. Throws an error or awaits the promise.
 */
async function awaitInit() {
    const initState = (0, internal_1.getEnabledPackageBrowser)(consts_1.PACKAGE_NAME)?.initState;
    if (!initState)
        throw new Error(consts_1.ErrorMessages.IE_0016);
    await initState;
}
exports.awaitInit = awaitInit;
